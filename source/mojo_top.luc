module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    //input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    //input spi_ss,           // AVR SPI Slave Select
    //input spi_mosi,         // AVR SPI MOSI
    //input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    //input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    //input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield

  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst){
      multi_seven_seg seg;
    }
  }
  
  adder add;
  comparator compare;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    //led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    
    io_led[2] = io_dip[2]; //dip switches set 2 give input a 
    io_led[1] = io_dip[1]; //dip switches set 1 give input b  
    
    
    case(io_dip[0][5:4]){ // 
      6b00xxxx: //ADDER
        seg.values = {4h0,4h1,4h1,4h5}; //displays ADD
        add.a = io_dip[2];
        add.b = io_dip[1];
        add.alufn = io_dip[0][0];
        io_led[0] = add.op;
        
        compare.z = 0;
        compare.v = 0;
        compare.n = 0;
        compare.alufn = 8h0;
        
      6b11xxxx: //comparator
        seg.values = {4h2,4h3,4h3,4h4}; //displays CMP
        compare.z = add.z;
        compare.v = add.v;
        compare.n = add.n;
        compare.alufn = io_dip[0][2];
        io_led[0] = compare.op;
        
        add.a = 8h0;
        add.b = 8h0;
        add.alufn = 8h0;
        
      default:
        seg.values = {4h5,4h5,4h5,4h5};
        add.a = 8h0;
        add.b = 8h0;
        add.alufn = 8h0;
        compare.z = 0;
        compare.v = 0;
        compare.n = 0;
        compare.alufn = 8h0;
        io_led[0] = 8h0;
        
    }
    
  }
}